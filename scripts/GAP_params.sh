#!/bin/bash

# Text colors
CYAN='\033[0;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

en_description=false

parameter_name=("StatusFlags" "SupplyVoltage" "TargetVelocity" "ActualVelocity" "TargetPosition" "ActualPosition" "TargetTorque" "ActualTorque" "CommutationMode" "CommutationModeVelocity" "CommutationModePosition" "MaxTorque" "OpenLoopCurrent" "Acceleration" "MotorPolePairs" "PWMFrequency" "HallSensorPolarity" "HallSensorDirection" "HallInterpolation" "HallSensorOffset" "EncoderDirection" "EncoderSteps" "EncoderInitMode" "TorqueP" "TorqueI" "VelocityP" "VelocityI" "PositionP" "BrakeChopperEnabled" "BrakeChopperVoltage" "BrakeChopperHysteresis" "PositionScalerM")

if [[ $# -ne 3 ]]
then
  echo -e "${RED}Error! Illegal number of parameters.${NC}"
  echo "To run this scipt:"
  echo "    $0 <Autogenerated YAML file used in the node (without the .yaml extension)> <Motor number> <Description Enable>"
  echo "Example:"
  echo "    $0 TMCM-1636 0 Y"
  echo -e "${YELLOW}Note: Running that example will refer to TMCM-1636.yaml from the \"tmcl_ros/config/autogenerated\" directory${NC}, Motor0 and will print description"
  exit 1
fi

cd src
# Check if yaml file is in the directory autogenerated
yaml_location=tmcl_ros/config/autogenerated/$1.yaml
if [ -f "$yaml_location" ]
then
  echo "YAML file exists."
else
  echo -e "${RED}YAML file does not exist, Exiting!${NC}"
  exit 1
fi

# Check if motor is available
MN=$(grep -w "TotalMotors:"  $yaml_location)
motornum=${MN##*": "}
motornum=$((motornum - 1))
if [ $2 -gt "$motornum" ]
then
  echo -e "${RED}Error! Motor is not available, Exiting!${NC}"
  exit 1
fi

# Check if 3rd argument is correct (Y/N)
if [ $3 == "Y" -o $3 == "y" ]
then
  en_description=true
elif [ $3 == "N" -o $3 == "n" ]
then
  en_description=false
else
  echo -e "${RED}Error! Wrong argument. Only accepts Y/N character, Exiting!${NC}"
  exit 1
fi


# Extract servicename from tmcl_ros_service.cpp file
SN=$(grep -w "s_node_name +"  tmcl_ros/src/tmcl_ros_service.cpp)
servicename=${SN%\"*} 
servicename=${servicename##*\"}

for entry in `rosservice list`
do
  if [[ $entry == *"$servicename"* ]]
  then
    break
  fi
done
echo -e "${CYAN}Service name: $entry${NC}"
echo " "
echo -e "${YELLOW}Please DO NOT close / end the script. Getting Axis Parameters on progress...${NC}"
echo " "

for ap in ${parameter_name[@]}
do
  AP=$(grep -w "$ap: "  tmcl_ros/config/autogenerated/$1.yaml)
  axisparam=${AP##*"[1, "}
  axisparam=${axisparam%%", "*}

  if [ "$en_description" = true ]
  then
    FD=$(echo "$(<$yaml_location)" | sed 's/"\n$ap: "//')
    description=${FD%%"$ap: "*}
    description=${description##*"$ap:"}
    description=$(echo $description|tr -d '\n')
    descarray+=("$description")
  fi

  OP=`rosservice call $entry "instruction: 'GAP'
instruction_type: $axisparam
motor_num: $2
value: 0"`
  OP=$(echo $OP|tr -d '\n')
  output=${OP#*": "}
  output=${output%%" "*}

  outputarray+=("$output")
done

echo " "
echo "==========================================================="
echo -e "${BLUE}Parameters for Motor$2${NC}"
echo "==========================================================="
echo " "

for ((index=0; index<${#parameter_name[@]}; index++))
do
  echo "${parameter_name[index]}: ${outputarray[index]}"
  if [ "$en_description" = true ]
  then
    echo "${descarray[index]}"
  fi
  echo " "
done

# If user wanted to add GAP different command, uncomment below script (remove ": '" and "'" characters)
# And edit "param_name" and "type" to your custom command
: '
param_name="Custom CMD"
type=0

OP=`rosservice call $entry "instruction: 'GAP'
instruction_type: $intruction_type
motor_num: $2
value: 0"`
OP=$(echo $OP|tr -d '\n')
output=${OP#*": "}
output=${output%%" "*}

echo "$param_name: $output"
'