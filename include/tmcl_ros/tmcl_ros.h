/**
 * Copyright (c) 2022-2023 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 **/

#ifndef TMCL_ROS_H
#define TMCL_ROS_H

#include "tmcl_interpreter.h"
#include "tmcl_motor.h"
#include "tmcl_bldc_motor.h"
#include "tmcl_stepper_motor.h"
#include "adi_tmcl/TmcParam.h"
#include "adi_tmcl/TmcCustomCmd.h"
#include "adi_tmcl/TmcGapGgpAll.h"
#include "std_msgs/Int32.h"
#include "std_msgs/String.h"

const uint8_t MOTOR_TYPE_BLDC = 6;
  
/* Parameter limits and default values */
const uint8_t TXRX_ID_MAX = 255;
const uint8_t TX_ID_DEFAULT = 1;
const uint8_t RX_ID_DEFAULT = 2;
const uint16_t TIMEOUT_MS_MAX = 5000;
const uint8_t TIMEOUT_MS_DEFAULT = 10;
const uint8_t EXEC_CMD_RETRIES_MAX = 3;
const uint8_t EXEC_CMD_RETRIES_DEFAULT = 1;
const uint8_t PUB_RATE_MAX = 100;
const uint8_t PUB_RATE_MIN = 1;
const uint8_t PUB_RATE_DEFAULT = 10;
const uint8_t AUTO_START_ADDITIONAL_DELAY_MAX = 60;
const uint8_t AUTO_START_ADDITIONAL_DELAY_DEFAULT = 0;

class TmclROS
{
public:
  /* Constructor */
  TmclROS(ros::NodeHandle* p_nh);

  /* Destructor */
  ~TmclROS();

  /* Initialization */
  bool init();

  /* De-initialization */
  bool deInit();

  /* Getter b_retries_exceeded variable */
  bool getRetriesExceededStatus();

private:
  /* Parameter Validation */
  bool validateParams();

  /* Creates motor */
  void createMotor();

  /* Initializes ROS Service */
  void initService();

  /* ROS Services */
  bool tmclCustomCMDCallBack(adi_tmcl::TmcCustomCmd::Request& req, adi_tmcl::TmcCustomCmd::Response& res);
  bool tmclGAPAllCallBack(adi_tmcl::TmcGapGgpAll::Request& req, adi_tmcl::TmcGapGgpAll::Response& res);
  bool tmclGGPAllCallBack(adi_tmcl::TmcGapGgpAll::Request& req, adi_tmcl::TmcGapGgpAll::Response& res);
  ros::ServiceServer custom_cmd_server_;
  ros::ServiceServer gap_all_server_;
  ros::ServiceServer ggp_all_server_;

  /* Pointers */
  ros::NodeHandle *p_nh_;
  TmclInterpreter *p_tmcl_interpreter_;
  std::vector<Motor*> p_motor_;

  uint16_t module_number_;
  uint8_t total_motors_;
  uint8_t motor_type_;
  
  /* ROS parameters */
  std::string s_node_name_;
  std::string s_namespace_;

  /* Autogenerated YAML*/        
  std::vector<std::string> param_ap_name_;
  std::vector<int> param_ap_type_;
  std::vector<std::string> param_gp_name_;
  std::vector<int> param_gp_type_;

  /* Ext YAML */
  int param_comm_interface_;
  std::string param_comm_interface_name_;
  int param_comm_tx_id_;
  int param_comm_rx_id_;
  int param_comm_timeout_ms_;
  int param_comm_exec_cmd_retries_;
  int param_auto_start_additional_delay_;
  float param_pub_rate_tmc_info_;
  bool param_adhoc_mode_;
  std::vector<int> param_en_motors_;

  adi_tmcl::TmcParam tmc_param_msg_;
};

#endif // TMCL_ROS_H
