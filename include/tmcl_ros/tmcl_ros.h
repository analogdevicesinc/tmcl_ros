/**
 * Copyright (c) 2022 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 **/

#ifndef TMCL_ROS_H
#define TMCL_ROS_H

#include "tmcl_interpreter.h"
#include "tmcl_motor.h"
#include "tmcl_bldc_motor.h"
#include "tmcl_stepper_motor.h"
#include "tmcl_ros/TmcParam.h"
#include <ros/ros.h>
#include <ros/console.h>
#include "tmcl_ros/TmcCustomCmd.h"
#include "tmcl_ros/TmcGapGgpAll.h"
#include "std_msgs/Int32.h"
#include "std_msgs/String.h"

#define MOTOR_TYPE_BLDC 6
  
/* Parameter limits and default values */
#define TXRX_ID_MAX 255
#define TX_ID_DEFAULT 1
#define RX_ID_DEFAULT 2
#define TIMEOUT_MS_MAX 5000
#define TIMEOUT_MS_DEFAULT 10
#define EXEC_CMD_RETRIES_MAX 3
#define EXEC_CMD_RETRIES_DEFAULT 1
#define PUB_RATE_MAX 100
#define PUB_RATE_DEFAULT 10
#define AUTO_START_ADDITIONAL_DELAY_MAX 60
#define AUTO_START_ADDITIONAL_DELAY_DEFAULT 0

class TmclROS
{
  public:
    /* Constructor */
    TmclROS(ros::NodeHandle* p_nh);

    /* Destructor */
    ~TmclROS();

    /* Initialization */
    bool init();

    /* De-initialization */
    bool deInit();

    /* Getter b_retries_exceeded variable */
    bool getRetriesExceededStatus();

  private:
    /* Parameter Validation */
    bool validateParams();

    /* Creates motor */
    void createMotor();

    /* Initializes ROS Service */
    void initService();

    /* ROS Services */
    ros::ServiceServer custom_cmd_server;
    ros::ServiceServer gap_all_server;
    ros::ServiceServer ggp_all_server;
    bool tmclCustomCMDCallBack(tmcl_ros::TmcCustomCmd::Request& req, tmcl_ros::TmcCustomCmd::Response& res);
    bool tmclGAPAllCallBack(tmcl_ros::TmcGapGgpAll::Request& req, tmcl_ros::TmcGapGgpAll::Response& res);
    bool tmclGGPAllCallBack(tmcl_ros::TmcGapGgpAll::Request& req, tmcl_ros::TmcGapGgpAll::Response& res);

    /* Pointers */
    ros::NodeHandle *p_nh_;
    TmclInterpreter *p_tmcl_int;
    std::vector<Motor*> p_motor;

    uint8_t total_motors;
    uint8_t motor_type;
    
    /* ROS parameters */
    std::string s_node_name;
    std::string s_namespace;

    /* Autogenerated YAML*/        
    std::vector<std::string> param_ap_name;
    std::vector<int> param_ap_type;
    std::vector<std::string> param_gp_name;
    std::vector<int> param_gp_type;

    /* Ext YAML */
    int param_comm_interface;
    std::string param_comm_interface_name;
    int param_comm_tx_id;
    int param_comm_rx_id;
    int param_comm_timeout_ms;
    int param_comm_exec_cmd_retries;
    int param_auto_start_additional_delay;
    float param_pub_rate_tmc_info;
    bool param_adhoc_mode;
    std::vector<int> param_en_motors;

    tmcl_ros::TmcParam tmc_param_msg;
};

#endif // TMCL_ROS_H
